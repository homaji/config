
""runtimepath
  let $MY_VIMRUNTIME = $HOME . '.vim'
  let $VIMPLUG= $MY_VIMRUNTIME . 'plugged'
  let $VIMCONFIG = $XDG_CONFIG_HOME . '/vim'
  " ^= にすることで、検索ディレクトリを前に追加
  set runtimepath^=$MY_VIMRUNTIME,$VIMPLUG,$VIMCONFIG

""Create Directory
if !isdirectory($MY_VIMRUNTIME . '/vimtemp')
    call mkdir($MY_VIMRUNTIME . '/vimtemp', 'p')
endif


""for Pyrhon Path
function! IncludePath(path)
    "define delimiter depends on platform
    if has('win32')|| has('win64')
        let delimiter = ";"
    else
        let delimiter = ":"
    endif
    let pathlist = split($PATH, delimiter)
    if isdirectory(a:path) && index(pathlist, a:path) == -1
        let $PATH=a:path.delimiter.$PATH
    endif
endfunction
"""for pyenv path
"if has('mac')
"IncludePath(expand("~/.pyenv/shims"))
"endif

""Vim-Plug
if empty(glob('$MY_VIMRUNTIME/autoload/plug.vim'))
    silent !curl -fLo $MY_VIMRUNTIME/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
    Plug 'junegunn/vim-plug'
    Plug 'Shougo/unite.vim'
    Plug 'Shougo/unite-outline'
    Plug 'Shougo/tabpagebuffer.vim'
    Plug 'Shougo/vimproc'
    Plug 'Shougo/neomru.vim'
    Plug 'thinca/vim-quickrun'
    Plug 'thinca/vim-qfreplace'
    Plug 'itchyny/lightline.vim'
    Plug 'rhysd/clever-f.vim'
    Plug 'scrooloose/syntastic'
    Plug 'altercation/vim-colors-solarized'
    Plug 'cocopon/iceberg.vim'
    Plug 'gkeep/iceberg-dark'
    Plug 'plasticboy/vim-markdown'
    Plug 'kannokanno/previm'
    Plug 'tyru/open-browser.vim'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'junegunn/goyo.vim'
call plug#end()

if has('win32')||('win64')
    let g:vimproc#download_windows_dll =1
endif
" https://mattn.kaoriya.net/software/vim/20191231001537.htm
call map(sort(split(globpath(&runtimepath, '/init/*.vim'))), {->[execute('exec "so" v:val')]})

"""Basic Config"""
filetype plugin on 
filetype indent on 
syntax on
syntax enable

""Encoding
set encoding=utf-8
set fileencodings=utf-8,cp932


""Directories
set autochdir
set backup
set backupdir=$MY_VIMRUNTIME/vimtemp
set directory=$MY_VIMRUNTIME/vimtemp
set undodir=$MY_VIMRUNTIME/vimtemp
set viminfo+=n$MY_VIMRUNTIME/viminfo.txt

""Use Clipboard"
set clipboard=unnamed,autoselect

""Buffer
set hidden

""set Wildmode. Bash like complement
set wildmode=list:longest

""Search
set incsearch
set ignorecase
set smartcase
set hlsearch

"""Key Config"""

""Change <Leader>
"macvimではoption+\がleaderになるので変更
let g:mapleader = ','
"map \ <leader>

"s+bB use Unite buffers
nnoremap sb :<C-u>Unite buffer_tab -buffer-name=file<CR>
nnoremap sB :<C-u>Unite buffer -buffer-name=file<CR>
nnoremap sf :<C-u>Unite file_mru<CR>
nnoremap sg :<C-u>Unite grep:. -buffer-name=search-buffer<CR>
"""Display Setting

"Cursol
set number
set cursorline

"number
set relativenumber

""ColorScheme
let scheme = 'iceberg'
augroup guicolorscheme
    autocmd!
    execute 'autocmd GUIEnter * colorscheme' scheme
augroup END
execute 'colorscheme' scheme
set background=dark

""FontRicty for Powerline BoldForPowerline
if has('win32')||('win64')
    set guifont=Cica:h12:b
    set guifontwide=Cica:h12:b
elseif has('mac')||('unix')
    set guifont=Cica:h18
    set guifontwide=Cica:h18
    set ambiwidth=double
endif
""Show Invisible Characters""
"http://qiita.com/X___MOON___X/items/26d3f292537bad197f64
map <silent> <F3> :set list!<CR>
set list
set listchars=tab:>_,trail:_

""Show all lines
"http://itchyny.hatenablog.com/entry/2014/12/25/090000
set display=lastline


""Set Tab line
"http://d.hatena.ne.jp/thinca/20111204/1322932585
set showtabline=2
set guioptions-=e

""Set list height
set pumheight=10
""Set matching
set showmatch
set matchtime=1
"enhance % (tab jump)
source $VIMRUNTIME/macros/matchit.vim

""TabWidth
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smartindent

""Netrw settings
let g:netrw_banner = 0 "Don't show banner
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4 "open in previous window
let g:netrw_altv = 1
let g:netrw_winsize = 25


"""File Type Setting
autocmd BufRead,BufNewFile *.md set filetype=markdown


"""Plugin Setting

""Unite""
let g:unite_split_rule = "botright"
let g:unite_winheight= 20
let g:unite_data_directory = $HOME.'/.vim/cache/unite'
let g:neomru#file_mru_path = $HOME.'/.vim/cache/neomru/file'
let g:neomru#directory_mru_path = $HOME.'/.vim/cache/neomru/directory'
if executable('pt')
    let g:unite_source_grep_command = 'pt'
    let g:unite_source_grep_default_opts ='--nogroup --nocolor'
    let g:unite_source_grep_recursive_opt = ''
endif

""Changelog""
let g:changelog_username = "homaji"
let g:changelog_timeformat = "%Y-%m-%d"

""quickrun.vim""
" 新しいウィンドウを下に開く
set splitbelow

"
"quickrun for sql
let g:quickrun_config = {}
let g:quickrun_config['sql'] = {
        \ 'command': 'mysql',
        \ 'exec': ['%c  %o < %s'],
        \ 'cmdopt': '%{MakeMySQLCommandOptions()}'
        \}

let g:mysql_config_host = '10.211.55.6'
let g:mysql_config_port = ''
let g:mysql_config_user = 'homaji'
function! MakeMySQLCommandOptions()
    if !exists("g:mysql_config_host")
        let g:mysql_config_host = input("host> ")
    endif
    if !exists("g:mysql_config_port")
        let g:mysql_config_port = input("port> ")
    endif
    if !exists("g:mysql_config_user")
        let g:mysql_config_user = input("user> ")
    endif
    if !exists("g:mysql_config_pass")
        let g:mysql_config_pass = input("password> ")
    endif
    if !exists("g:mysql_config_db")
        let g:mysql_config_db = input("database> ")
    endif
    
    let optlist = []
    if g:mysql_config_user != ''
        call add(optlist, '-u ' . g:mysql_config_user)
    endif
    if g:mysql_config_host != ''
        call add(optlist, '-h ' . g:mysql_config_host)
    endif
    if g:mysql_config_pass != ''
        call add(optlist, '-p' . g:mysql_config_pass)
    endif
    if g:mysql_config_port != ''
        call add(optlist, '-P ' . g:mysql_config_port)
    endif
    if exists("g:mysql_config_otheropts")
        call add(optlist, g:mysql_config_otheropts)
    endif

    call add(optlist, g:mysql_config_db)
    return join(optlist, ' ') 
endfunction
""Clever-f"
"大文字を入力したときだけ、大文字小文字を区別
let g:clever_f_smart_case = 1
"migemoっぽい検索
let g:clever_f_use_migemo = 1

""eskk
set imdisable
if has('vim_starting')
    if  has('mac')
        let g:eskk#directory= '~/.eskk/usr'
        let g:eskk#dictionary='~/.eskk/usr/USER.L'
        let g:eskk#large_dictionary = {
                    \ 'path':"~/.eskk/SKK-JISYO.L",
                    \'sorted':1,
                    \'encoding': 'euc-jp'
                    \}
    elseif has('win32')||has('win64')
        let g:eskk#directory= '~/DICTS/eskk/'
        let g:eskk#dictionary='~/DICTS/eskk/USER.L'
        let g:eskk#large_dictionary = {
                    \    'path':"~/DICTS/SKK-JISYO.L",
                    \    'sorted':1,
                    \    'encoding': 'euc-jp'
                    \}
    else
    endif
endif
let g:eskk#debug=0
let g:eskk#egg_like_newline=1
let g:eskk#revert_henkan_style="okuri"
let g:eskk#enable_completion=0

""previm
let g:previm_enable_realtime = 1

let g:previm_disable_default_css = 1
let g:previm_custom_css_path = '~/data/dev/markdown_preview.css'

"""Function
""Scouter
function! Scouter(file, ...)
  let pat = '^\s*$\|^\s*"'
  let lines = readfile(a:file)
  if !a:0 || !a:1
    let lines = split(substitute(join(lines, "\n"), '\n\s*\\', '', 'g'), "\n")
  endif
  return len(filter(lines,'v:val !~ pat'))
endfunction
command! -bar -bang -nargs=? -complete=file Scouter
\        echo Scouter(empty(<q-args>) ? $MYVIMRC : expand(<q-args>), <bang>0)

